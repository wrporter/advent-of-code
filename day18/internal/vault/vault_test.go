package vault

import (
	"fmt"
	"testing"
)

func TestVault_MinSteps(t *testing.T) {
	tests := []struct {
		maze []string
		want int
	}{
		{
			[]string{
				"#########",
				"#b.A.@.a#",
				"#########",
			},
			8,
		},
		{
			[]string{
				"########################",
				"#f.D.E.e.C.b.A.@.a.B.c.#",
				"######################.#",
				"#d.....................#",
				"########################",
			},
			86,
		},
		{
			[]string{
				"########################",
				"#...............b.C.D.f#",
				"#.######################",
				"#.....@.a.B.c.d.A.e.F.g#",
				"########################",
			},
			132,
		},
		{
			[]string{
				"#################",
				"#i.G..c...e..H.p#",
				"########.########",
				"#j.A..b...f..D.o#",
				"########@########",
				"#k.E..a...g..B.n#",
				"########.########",
				"#l.F..d...h..C.m#",
				"#################",
			},
			136,
		},
		{
			[]string{
				"########################",
				"#@..............ac.GI.b#",
				"###d#e#f################",
				"###A#B#C################",
				"###g#h#i################",
				"########################",
			},
			81,
		},
	}
	for i, tt := range tests {
		t.Run(fmt.Sprintf("Test_%d", i), func(t *testing.T) {
			v := New(tt.maze)
			if got := v.MinSteps(); got != tt.want {
				t.Errorf("MinSteps() = %v, want %v", got, tt.want)
			}
		})
	}
}
