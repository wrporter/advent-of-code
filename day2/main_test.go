package main

import (
	"fmt"
	"reflect"
	"testing"
)

func TestSolve(t *testing.T) {
	tests := []struct {
		program []int
		want    []int
	}{
		{
			[]int{1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50},
			[]int{3500, 9, 10, 70, 2, 3, 11, 0, 99, 30, 40, 50},
		},
		{
			[]int{1, 0, 0, 0, 99},
			[]int{2, 0, 0, 0, 99},
		},
		{
			[]int{2, 3, 0, 3, 99},
			[]int{2, 3, 0, 6, 99},
		},
		{
			[]int{2, 4, 4, 5, 99, 0},
			[]int{2, 4, 4, 5, 99, 9801},
		},
		{
			[]int{1, 1, 1, 4, 99, 5, 6, 0, 99},
			[]int{30, 1, 1, 4, 2, 5, 6, 0, 99},
		},
		{
			[]int{1, 0, 0, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 13, 1, 19, 1, 6, 19, 23, 2, 6, 23, 27, 1, 5, 27, 31, 2, 31, 9, 35, 1, 35, 5, 39, 1, 39, 5, 43, 1, 43, 10, 47, 2, 6, 47, 51, 1, 51, 5, 55, 2, 55, 6, 59, 1, 5, 59, 63, 2, 63, 6, 67, 1, 5, 67, 71, 1, 71, 6, 75, 2, 75, 10, 79, 1, 79, 5, 83, 2, 83, 6, 87, 1, 87, 5, 91, 2, 9, 91, 95, 1, 95, 6, 99, 2, 9, 99, 103, 2, 9, 103, 107, 1, 5, 107, 111, 1, 111, 5, 115, 1, 115, 13, 119, 1, 13, 119, 123, 2, 6, 123, 127, 1, 5, 127, 131, 1, 9, 131, 135, 1, 135, 9, 139, 2, 139, 6, 143, 1, 143, 5, 147, 2, 147, 6, 151, 1, 5, 151, 155, 2, 6, 155, 159, 1, 159, 2, 163, 1, 9, 163, 0, 99, 2, 0, 14, 0},
			[]int{613553, 0, 0, 2, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 13, 1, 0, 1, 6, 19, 2, 2, 6, 23, 4, 1, 5, 27, 5, 2, 31, 9, 15, 1, 35, 5, 16, 1, 39, 5, 17, 1, 43, 10, 21, 2, 6, 47, 42, 1, 51, 5, 43, 2, 55, 6, 86, 1, 5, 59, 87, 2, 63, 6, 174, 1, 5, 67, 175, 1, 71, 6, 177, 2, 75, 10, 708, 1, 79, 5, 709, 2, 83, 6, 1418, 1, 87, 5, 1419, 2, 9, 91, 4257, 1, 95, 6, 4259, 2, 9, 99, 12777, 2, 9, 103, 38331, 1, 5, 107, 38332, 1, 111, 5, 38333, 1, 115, 13, 38338, 1, 13, 119, 38343, 2, 6, 123, 76686, 1, 5, 127, 76687, 1, 9, 131, 76690, 1, 135, 9, 76693, 2, 139, 6, 153386, 1, 143, 5, 153387, 2, 147, 6, 306774, 1, 5, 151, 306775, 2, 6, 155, 613550, 1, 159, 2, 613550, 1, 9, 163, 0, 99, 2, 0, 14, 0},
		},
	}
	for i, tt := range tests {
		t.Run(fmt.Sprintf("Test_%d", i), func(t *testing.T) {
			if got := Solve(tt.program); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Solve() = %v, want %v", got, tt.want)
			}
		})
	}
}
